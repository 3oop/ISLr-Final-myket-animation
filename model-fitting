#SVM

```{r}
library(e1071)
library(caret)
```

```{r}
data = 'clean_data.csv'

df <- read.csv(data)

# Convert columns 
df$Country <- as.factor(df$Country)
df$Rade <- as.factor(df$Rade)
df$Year <- as.numeric(df$Year)
```

Split the data into features and target
```{r}
target <- 'Amtiaz'
predictors <- setdiff(names(df), target)

# or
#features <- data[,-which(names(data) == "Amtiaz")]
#target <- data$Amtiaz
```

train,test
```{r}
set.seed(123)
train_index <- sample(1:nrow(data), 0.8 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
```

```{r}
svm_model <- svm(Amtiaz ~ ., data = train_data, kernel = "radial", cost = 1, gamma = 0.1)

plot(svm_model, train_data)
summary(svm_model)
```

```{r}
predictions <- predict(svm_model,test_data)
head(predictions)

accuracy <- mean(predictions == test_data$Amtiaz)
print(paste("Accuracy:", accuracy))

confusionMatrix(predictions, test_data$Amtiaz)

mse <- mean((predictions - test_data$Amtiaz)^2)
print(paste("Mean Squared Error:", mse))
```

```{r}
tuned <- tune(svm, Amtiaz ~ ., data = train_data,kernel = "radial", ranges = list(cost =c(0.1, 1, 10), gamma = c(0.01, 0.1, 1)))
best_model <- tuned$best.model
summary(best_model)
```






# random forest

```{r}
library(randomForest)
```

```{r}
data = 'clean_data.csv'

df <- read.csv(data)

# Convert columns 
df$Country <- as.factor(df$Country)
df$Rade <- as.factor(df$Rade)
df$Year <- as.numeric(df$Year)
```

```{r}
set.seed(123)
train_index <- sample(1:nrow(data), 0.8 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
```

```{r}
features <- train_data[, -which(names(train_data) == "Amtiaz")]
target <- train_data$Amtiaz
```

```{r}
rf_model <- randomForest(Amtiaz ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)

print(rf_model)
```

```{r}
predictions <- predict(rf_model, test_data)
head(predictions)

# Calculate accuracy (for classification tasks)
accuracy <- mean(predictions == test_data$Amtiaz)
print(paste("Accuracy:", accuracy))

# For regression tasks, use Mean Squared Error (MSE)
mse <- mean((predictions - test_data$Amtiaz)^2)
print(paste("Mean Squared Error:", mse))

```

```{r}
tuned_rf <- tuneRF(features, target, stepFactor = 1.5, improve = 0.01, ntreeTry = 100)
print(tuned_rf)
```

```{r}
importance(rf_model)
varImpPlot(rf_model)
```

```{r}
# For classification
confusionMatrix(predictions, test_data$Amtiaz)

# For regression
rsq <- 1 - sum((predictions - test_data$Amtiaz)^2) / sum((mean(test_data$Amtiaz) - test_data$Amtiaz)^2)
print(paste("R-squared:", rsq))
```
